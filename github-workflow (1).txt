name: Solar Cleaner CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  arduino-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Arduino Lint
        uses: arduino/arduino-lint-action@v1
        with:
          library-manager: update
          compliance: strict
          project-type: sketch
          verbose: true
  
  compile-sketches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Compile Arduino Sketches
        uses: arduino/compile-sketches@v1
        with:
          sketch-paths: |
            ./src/main.ino
          fqbn: arduino:avr:uno
          libraries: |
            # List any required libraries here
          verbose: true
          
  test-esp32-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
          
      - name: Create PlatformIO test project
        run: |
          mkdir -p pio_test
          cp -r src pio_test/
          cp -r iot pio_test/
          cd pio_test
          
          # Create platformio.ini
          echo "[env:esp32dev]" > platformio.ini
          echo "platform = espressif32" >> platformio.ini
          echo "board = esp32dev" >> platformio.ini
          echo "framework = arduino" >> platformio.ini
          echo "lib_deps =" >> platformio.ini
          echo "  PubSubClient" >> platformio.ini
          echo "  ArduinoJson" >> platformio.ini
          echo "  ESP32 Arduino" >> platformio.ini
          
          # Edit config.h to enable IoT features
          sed -i 's/#define ENABLE_IOT_FEATURES false/#define ENABLE_IOT_FEATURES true/' config.h
          
          # Run PlatformIO build
          platformio run
          
  release:
    runs-on: ubuntu-latest
    needs: [arduino-lint, compile-sketches, test-esp32-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get version from config.h
        id: get_version
        run: |
          VERSION=$(grep -o '"[0-9]\+\.[0-9]\+\.[0-9]\+"' src/config.h | tr -d '"')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Create Release ZIP File
        run: |
          mkdir -p release
          zip -r release/solar-cleaner-${{ env.VERSION }}.zip src/ iot/ docs/ models/ schematics/ LICENSE README.md
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/solar-cleaner-${{ env.VERSION }}.zip
          asset_name: solar-cleaner-${{ env.VERSION }}.zip
          asset_content_type: application/zip